(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{62:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return l}));var s=n(2),a=n(6),o=(n(0),n(73)),r={id:"format",title:"The Jyfti Format"},i={unversionedId:"format",id:"format",isDocsHomePage:!1,title:"The Jyfti Format",description:"The Jyfti format expresses the concept of a workflow that accepts a couple of inputs, executes a sequence of steps and returns with an output.",source:"@site/docs/format.md",permalink:"/jyfti/docs/format",editUrl:"https://github.com/jyfti/jyfti/edit/master/website/docs/format.md",sidebar:"someSidebar",previous:{title:"Usage",permalink:"/jyfti/docs/usage"},next:{title:"Recipes",permalink:"/jyfti/docs/recipes"}},p=[{value:"Schema",id:"schema",children:[]},{value:"Inputs",id:"inputs",children:[]},{value:"Output",id:"output",children:[]},{value:"Steps",id:"steps",children:[{value:"Request steps",id:"request-steps",children:[]},{value:"Expression steps",id:"expression-steps",children:[]},{value:"For-comprehensions",id:"for-comprehensions",children:[]}]}],c={rightToc:p};function l(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(s.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The Jyfti format expresses the concept of a workflow that accepts a couple of inputs, executes a sequence of steps and returns with an output."),Object(o.b)("p",null,"A simple example is the ",Object(o.b)("inlineCode",{parentName:"p"},"retrieve-readme")," workflow."),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-json"}),'{\n  "$schema": "https://raw.githubusercontent.com/jyfti/jyfti/master/workflow-schema.json",\n  "name": "Retrieve README file of a GitHub repository",\n  "inputs": {\n    "org": {\n      "type": "string",\n      "description": "The GitHub organization",\n      "default": "jyfti"\n    },\n    "repo": {\n      "type": "string",\n      "description": "The GitHub repository",\n      "default": "jyfti"\n    }\n  },\n  "output": {\n    "$eval": "readmeResponse.body"\n  },\n  "steps": [\n    {\n      "assignTo": "readmeResponse",\n      "request": {\n        "method": "GET",\n        "url": "https://raw.githubusercontent.com/${inputs.org}/${inputs.repo}/master/README.md"\n      }\n    }\n  ]\n}\n')),Object(o.b)("h2",{id:"schema"},"Schema"),Object(o.b)("p",null,"The optional ",Object(o.b)("inlineCode",{parentName:"p"},"$schema")," defines the json schema which editors should validate against and use for auto-completion."),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-json"}),'{\n  "$schema": "https://raw.githubusercontent.com/jyfti/jyfti/master/workflow-schema.json"\n}\n')),Object(o.b)("h2",{id:"inputs"},"Inputs"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"inputs")," field defines a list of inputs to your workflow.\nEach input is assigned a ",Object(o.b)("a",Object(s.a)({parentName:"p"},{href:"https://json-schema.org/"}),"json schema")," that Jyfti uses to validate and prompt for input."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," Inputs can be defined to be arbitrary json, but the CLI of Jyfti only reads flat inputs like strings and numbers.")),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-json"}),'{\n  "inputs": {\n    "org": {\n      "type": "string",\n      "description": "The GitHub organization",\n      "default": "jyfti"\n    },\n    "repo": {\n      "type": "string",\n      "description": "The GitHub repository",\n      "default": "jyfti"\n    }\n  }\n}\n')),Object(o.b)("h2",{id:"output"},"Output"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"output")," field defines the ",Object(o.b)("a",Object(s.a)({parentName:"p"},{href:"https://json-e.js.org/"}),"JSON-e expression")," that is returned after the workflow completed all steps."),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-json"}),'{\n  "output": {\n    "$eval": "readmeResponse.body"\n  }\n}\n')),Object(o.b)("h2",{id:"steps"},"Steps"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"steps")," field defines a sequence of steps that are executed one after the other.\nEach step evaluates to a value that can be optionally assigned to a variable with ",Object(o.b)("inlineCode",{parentName:"p"},"assignTo"),".\nA step can access the variables populated by all previous step."),Object(o.b)("p",null,"There are three different types of steps."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Request steps"),Object(o.b)("li",{parentName:"ul"},"Expression steps"),Object(o.b)("li",{parentName:"ul"},"For-comprehensions")),Object(o.b)("h3",{id:"request-steps"},"Request steps"),Object(o.b)("p",null,"A request step defines a single http request."),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-json"}),'{\n  "assignTo": "readmeResponse",\n  "request": {\n    "method": "GET",\n    "url": "https://raw.githubusercontent.com/${inputs.org}/${inputs.repo}/master/README.md",\n    "body": {\n      "$eval": "${previousResponse.body}"\n    },\n    "headers": {\n      "Authorization": "Bearer ${token}"\n    }\n  }\n}\n')),Object(o.b)("p",null,"It requires a ",Object(o.b)("inlineCode",{parentName:"p"},"url")," and optionally accepts a ",Object(o.b)("inlineCode",{parentName:"p"},"method"),", ",Object(o.b)("inlineCode",{parentName:"p"},"body")," and ",Object(o.b)("inlineCode",{parentName:"p"},"headers"),".\nEach of these fields is evaluated as a ",Object(o.b)("a",Object(s.a)({parentName:"p"},{href:"https://json-e.js.org/"}),"JSON-e expression"),"."),Object(o.b)("h3",{id:"expression-steps"},"Expression steps"),Object(o.b)("p",null,"An expression defines a transformation from one json object into another.\nIt is useful to transform the output of one request step into the input of another request step."),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-json"}),'{\n  "assignTo": "variable",\n  "expression": {\n    "e": "${a.b}"\n  }\n}\n')),Object(o.b)("p",null,"The value of the ",Object(o.b)("inlineCode",{parentName:"p"},"expression")," field is defined as a ",Object(o.b)("a",Object(s.a)({parentName:"p"},{href:"https://json-e.js.org/"}),"JSON-e expression"),"."),Object(o.b)("h3",{id:"for-comprehensions"},"For-comprehensions"),Object(o.b)("p",null,"In cases, where you need to execute a couple of steps for each item in a list, a for-comprehesion step can come in handy."),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-json"}),'{\n  "assignTo": "bodies",\n  "for": {\n    "const": "url",\n    "in": { "$eval": "urls" },\n    "do": [\n      {\n        "assignTo": "response",\n        "request": {\n          "url": "${url}"\n        }\n      },\n      {\n        "assignTo": "body",\n        "expression": {\n          "$eval": "response.body"\n        }\n      }\n    ],\n    "return": "body"\n  }\n}\n')),Object(o.b)("p",null,"It requires four fields ",Object(o.b)("inlineCode",{parentName:"p"},"const"),", ",Object(o.b)("inlineCode",{parentName:"p"},"in"),", ",Object(o.b)("inlineCode",{parentName:"p"},"do")," and ",Object(o.b)("inlineCode",{parentName:"p"},"return"),".\nIt evaluates the ",Object(o.b)("a",Object(s.a)({parentName:"p"},{href:"https://json-e.js.org/"}),"JSON-e expression")," of the field ",Object(o.b)("inlineCode",{parentName:"p"},"in")," and expects it to evaluate to a list.\nThen, it executes all the steps of the ",Object(o.b)("inlineCode",{parentName:"p"},"do")," list for each element in the list.\nThe element of the list is available via the name defined with the field ",Object(o.b)("inlineCode",{parentName:"p"},"const"),".\nOnce all steps are executed for all elements of the list, the for-comprehension returns a list of all the variable values defined with the field ",Object(o.b)("inlineCode",{parentName:"p"},"return"),"."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Note:")," For-comprehension steps can contain for-comprehension steps itself.")))}l.isMDXComponent=!0}}]);